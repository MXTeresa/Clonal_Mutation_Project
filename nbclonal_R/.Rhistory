roxygenise()
library(roxygen2)
library(devtools)
roxygenise()
library(devtools)
devtools::install_github("MXTeresa/nbclonal")
library(parallel)
library(forcats)
library(tidyverse)
library(reshape)
devtools::install_github("MXTeresa/nbclonal")
install.packages("usethis")
install.packages("usethis")
library(usethis)
use_github()
use_github_links()
?use_github()
?use_github_links()
?use_git
devtools::install_github("MXTeresa/nbclonal")
ls(nbclonal)
library(nbclonal)
ls("package:nbclonal")
pmf.clonal_params(clonal, listClonal, n_values, R0, mu_values, maxMuGen, maxFS)
library("nbclonal")
ls("package:nbclonal")
?LL_meanNb.df
library(roxygen2)
roxygenise()
library(devtools)
rhs <- function(p, R0, mu) {
1 / (1 + (R0 * exp(-mu) * (1 - p)) / (exp(-mu)))^exp(-mu)
}
rhs(0.1, 1.4, 0.4)
load_all()
LL_lambda(sample_data, listClonal, 2.1, 1.6, 0.4, 50, 50, 10)
list_clonal(1:10, 1.6, seq(0.1, 2, by = 0.2), 50, 50, 5)
library(parallel)
library(forcats)
library(tidyverse)
library(reshape)
list_clonal(1:10, 1.6, seq(0.1, 2, by = 0.2), 50, 50, 5)
meanClonal(2, 1.2, 0.4, 60, 60, 5)
pmf.P_clonal(2, 1.2, 0.4, 60, 60, 5)
df <- pmf.P_clonal(2, 1.2, 0.4, 60, 60, 5)
df
sum <- 0
maxClonal
maxClonal <- 5
for (i in 1:(maxClonal + 1)) {
sum <- sum + i * df[i + 1, 2]
}
sum
i
df
df[i + 1, 2]
for (i in 1:maxClonal) {
sum <- sum + i * df[i + 1, 2]
}
sum
sum <- 0
for (i in 1:maxClonal) {
sum <- sum + i * df[i + 1, 2]
}
sum
df <- pmf.P_clonal(n, R0, mu, maxMuGen, maxFS, maxClonal)
#' @param R0 Reproduction number, a positive number
#' @param mu Mutation rate, a positive number
#' @param maxMuGen Maximum number of mutant lineages being calculated
#' @param maxFS Maximum number of final sizes being calculated
#' @param maxClonal Maximum number of clonal mutations being calculated
#' @return A number representing the expected clonal mutations
#' @examples
#' meanClonal(2, 1.2, 0.4, 60, 60, 5)
#' meanClonal(3, 3.5, 1.6, 120, 130, 5)
#' @export
meanClonal <- function(n, R0, mu, maxMuGen, maxFS, maxClonal) {
df <- pmf.P_clonal(n, R0, mu, maxMuGen, maxFS, maxClonal)
sum <- 0
for (i in 1:maxClonal) {
sum <- sum + i * df[i + 1, 2]
}
return(sum)
}
meanClonal(2, 1.2, 0.4, 60, 60, 5)
meanClonal(3, 3.5, 1.6, 120, 130, 5)
pmf.P_clonal(3, 3.5, 1.6, 120, 130, 8)
pmf.P_clonal(3, 3.5, 1.6, 100, 100, 8)
pmf.P_clonal(3, 3.5, 1.6, 120, 110, 8)
pmf.P_mu_n(3, 3.5, 1.6, 120, 130)
pmf.P_mu_n(3, 3.5, 1.6, 120, 110)
pmf.alloff(1.2, 0.4, 5)
pmf.alloff(3.5, 1.6, 8)
P_wt_est(2, 1.2, 0.4)
P_wt_est(1, 3.5, 1.6)
P_wt_est(3, 8, 0.8)
P_wt_est(3, 8, 0.8)
P_wt_est(2, 3.5, 1.6)
P_wt_est(2, 5.6, 1.6)
FS(3, 1.2, 0.4)
FS(6, 3.5, 1.6)
pmf.FS(1.2, 0.4, 60)
pmf.FS(3.5, 1.6, 120)
FSn(2, 3, 1.2, 0.4)
FSn(3, 6, 3.5, 1.6)
pmf.FSn(2, 1.2, 0.4, 60)
pmf.FSn(3, 3.5, 1.6, 120)
P_mu_n(2, 1, 1.2, 0.4, 60)
P_mu_n(3, 4, 3.5, 1.6, 120)
pmf.P_mu_n(2, 1.2, 0.4, 60, 60)
pmf.P_mu_n(3, 3.5, 1.6, 120, 110)
P_mu_est(3, 4, 3.5, 1.6, 120, 110)
pmf.P_mu_est(3, 3.5, 1.6, 120, 110)
Px_analytical(3, 3.5)
Px(3, 3.5, 1.6, 120, 110)
P0(3, 3.5, 1.6, 120, 110)
P0(3, 3.5, 1.6, 120, 110)
P1plus(3, 3.5, 1.6, 120, 110)
pmf.P_clonal_round(3, 6, 3.5, 1.6, 120, 110)
pmf.P_clonal_round(2, 3, 1.2, 0.4, 60, 60)
P_clonal_round(2, 3, 1.2, 0.4, 60, 60)
P_clonal_round(3, 6, 3.5, 1.6, 120, 110)
pmf.P_clonal_round(2, 1.2, 0.4, 60, 60, 5)
pmf.P_clonal_round(3, 3.5, 1.6, 120, 110, 5)
P_clonal(3, 0, 3.5, 1.6, 120, 110)
pmf.P_clonal_withPx(3, 3.5, 1.6, 120, 110, 8)
P_clonal(3, 0, 3.5, 1.6, 120, 110)
pmf.P_clonal_withPx(3, 3.5, 1.6, 120, 110, 8)
pmf.P_clonal(3, 3.5, 1.6, 120, 110, 8)
list_clonal(1:10, 1.6, seq(0.1, 2, by = 0.2), 50, 50, 5)
document()
?meanClonal.df
?LL_lambda_mu
document()
load_all()
?LL_lambda_mu
devtools::install_github("koellelab/nbclonal/nbclonal_R")
